<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>肯尼的數位流浪</title><link>https://kenny50.github.io/</link><description>Recent content on 肯尼的數位流浪</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Apr 2024 11:00:55 +0800</lastBuildDate><atom:link href="https://kenny50.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro of digital nomad in Malaysia</title><link>https://kenny50.github.io/digital-nomad/intro-of-digital-nomad-in-malaysia/</link><pubDate>Wed, 03 Apr 2024 11:00:55 +0800</pubDate><guid>https://kenny50.github.io/digital-nomad/intro-of-digital-nomad-in-malaysia/</guid><description>馬來西亞數位遊牧(ㄧ) 馬來西亞，其實並不是一個熱門的數位遊牧目的地，這次有緣在馬來西亞嘗試數位遊牧，主要原因是我的好友舉辦婚禮，我過去當伴郎，才有了這個機會，儘管如此，我依然在大馬留下很棒的回憶，總體來說，以數位遊牧為重心的人，可以選在待在吉隆坡，以遠端工作和文化體驗的，我建議待在檳城，若是非常喜歡自然景觀、冒險體驗的，可以嘗試東馬
網路 馬來西亞的基礎網路設備在都市都算完善，但還是建議一定要有網路 sim 卡，以我個人的住宿為例，該空間有出現平常日但 WiFi 服務有問題，無法使用的狀況，後來是請外部廠商來進行維修，不論出門在外還是臨時狀況，有網路就多一份保障
住宿 經過友人的推薦，我最後選的是這間 Coliv Damai ，雖說網站上只有包季包年的資訊，但經過詢問，是可以提供包月的計費方式的，這間不僅地點良好，位於市中心，治安好（附近都是大使館），走路三分鐘就有超市，旁邊還可以直接購買 touch&amp;rsquo;n go card，距離高速公路的路口也不遠，更棒的是會經常舉辦社交活動，光是我待在那邊的一個月，就參加了三次，（農曆新年那週沒有活動），如果全部參加應該是五次，但我對卡拉 ok 沒興趣，第一次活動的時間又在參加婚禮，總之以社交取向來說，這間的氛圍很棒
缺點當然也是有的
對想認識其他數位遊牧的來說，這邊更常遇到的是國際學生，相對來說數位遊牧的比例較少 WiFi 有故障記錄，這對數位遊牧來說扣分比較大，但也應該算作特例事件 不會附上棉被、枕頭，這點有些見仁見智，以經營者的考量其實很合理，主要是長租的話，比起提供這些，既難以確保退租後的品項，客戶也可能用不習慣，算是多一事不如少一事，當然如果能提供 IKEA 品項的代購，能夠直接花錢處理掉就更好了 其他住宿當然也會介紹，除了 Coliv Damai，我還看到了其他感興趣的住宿 upstair downstair 在 KLCC 的那間地點不錯，另一地點就不推薦了，可惜的是最短好像是三個月，這次就和我無緣 komune living 有和大馬政府合作數位遊牧相關計畫的 Coliving ，以想認識數位遊牧的角度，或許這間可以試試，他的住宿也有提供以日計價的一般住宿，住宿環境看著不錯，但地點會比較遠，和我這次的計畫不同，所以也沒有選，但讓我非常心動
至於一般的短租，我有看到 roomz 這邊不僅得多花時間查詢，和屋主親自聯絡，還經常有已經租出去但還有下廣告的情況，但以純短租的 cp 值來說，價格會更好，但以我的角度來說，數位遊牧的一大樂趣就是和更多人交流，這情況就不適合從當地租屋網找，而這邊還有個大風險是要先了解各區的治安，不得不說台灣的治安真的蠻好的
交通 這一定是重中之重，這邊會分為三個部分來說明
公眾交通 公眾交通非常重要，一來吉隆坡容易塞車，二來出門在外，有時多個藉口或許可以避免掉一些情境，回到正題，在馬來西亞的交通卡叫做 touch&amp;rsquo;n go ，這非常好用，因為在吉隆坡 MRT, KTS &amp;hellip; 是由不同公司經營的，每次轉線要買票就會超級麻煩，而 TNG 卡，可以通用所有的捷運、火車等，更重要的是，這張卡可以用手機存值、檢視餘額等等，現在就連馬來西亞的身分證都被加入 TNG 卡的功能，可以說是由國家主推的了
至於公車，我沒搭過
租車 個人是建議，在吉隆坡內不要開車，道路設計亂，駕駛習慣不同，而且又容易塞車，那出吉隆坡後，租車有兩個重點要討論
高速公路付費 停車費繳交 高速公路付費，已經不接受現金了，現在主流是 TNG 卡以及另一個叫 MyPass 的東西，租車時可以向租車公司詢問，雖然聽當地人說現金不是不行，但好像要找到公務員才能繳費，偏偏那邊的公務員不僅效率慢，而且用現金的手續繁雜，絕對推薦推薦使用 TNG 卡</description></item><item><title>好策略壞策略第一章</title><link>https://kenny50.github.io/read/%E5%A5%BD%E7%AD%96%E7%95%A5%E5%A3%9E%E7%AD%96%E7%95%A5%E7%AC%AC%E4%B8%80%E7%AB%A0/</link><pubDate>Wed, 03 Apr 2024 11:00:55 +0800</pubDate><guid>https://kenny50.github.io/read/%E5%A5%BD%E7%AD%96%E7%95%A5%E5%A3%9E%E7%AD%96%E7%95%A5%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid><description>好策略壞策略 第一章 好策略應該聚焦，不僅是策略和目標聚焦，且團隊必須有有相同聚焦的行為和目標，好策略必須具備有意願，有能力明鑑情勢，獨排眾議，向各種利益說不的領導者
而壞策略經常出現在
意圖兼顧相互衝突的目標 將資源投入彼此衝突的目標 考慮難以兼得的利益 做跟不做，都是一種策略
在軟體專案中，也可以察覺中蛛絲馬跡，在某些專案內會出現多頭火車的情況，也就是多個主管對這個專案都有決定權，而這些主管並不會事前溝通，而 PM 或是開發團隊，也會在溝通上的時間差，最終導致同時開出了功能相反或相互矛盾的需求
比方說，行銷主管認為快速變現是最重要的，用戶體驗、穩定性、安全性優先度都不高，要求團隊縮減流程快速上線，而設計主管將用戶體驗、動畫效果、流程考慮得非常詳細，這時就會有快速上線和盡善盡美的兩種狀態同時出現了，每個專案都不應該用這種方式管理，不僅將基層夾在中間，我已可以肯定的說，如果沒有一個好的 PM ，這項專案最後只會變成四不像的合成獸，最後只會苟延殘喘或失敗
當然，只有在少數專案內，能有一個話語權充足，且有明確目標和執行方法的人來帶領，多數情況，都會是由不同職能的人一起合作，而對專案來說，負責制訂出執行策略的主要角色就是 PM ，尤其是接案界，業主通常會有想法，如何落實想法，如何辨別出真正的需求，如何同時評估開發、設計團隊產能並和業主協調出合理的開發時程，各項業主的需求優先順序如何安排等等，一個 PM 絕對不會只是傳聲筒，也不僅是開任務卡片的人， PM 應該要能夠協調一個金三角，那就是 資源 Cost、時間 Time、需求 Scope
那在這種情境，PM 該如何向行銷、設計、開發等等團隊溝通，也是考驗實力的一環，在這議題內，簡單設想三種情況來說明
在幾位之上，還有一個決策者，可以影響整個專案的方向 這絕對會是最簡單的情境，在這情境需要做的便是向上回報狀況，請教執行方向，得到回覆後便可以向各主管交代 PM 本身能對專案有主要決策權，可以影響整個專案的方向 這也是一個相對好的情境，儘管必須謹慎評估產品、競爭者、合作對象等等的狀態，但鑒於在內部溝通上有較大的話語權，只要理由合理，阻力都不會太大 所有主管的決策權一致，要協調溝通才能決定專案方向 這會是最具有挑戰性的情境，每個團隊、甚至是派系，都有可能想借機產生影響力，這時不僅是競爭對手、合作夥伴的對外問題要考量，公司內部也容易從專案本身失焦，可以說是最容易產生壞策略的狀態，當然，也不是無法可解，只是這種狀態不是舉例就能完美說明，非常仰賴當下情況 現在也只能說明方向，以及推薦一些書籍而已，當然在說明中會撇除辦公室政治因素，在現實中也是，在重要的專案之中，第一步就是將大家的注意力從權力操作轉向專案本身，若效果有限，而多數的意見卻引導專案逐步走向失敗，只能拱心自問，是不要要繼續待在這個環境
人的因素，永遠都是最困難的部分，因為每個人不同不同的背景，不同的目的，會讓每個溝通過程變得不同，儘管這是一個沒有固定答案的情況，但我們依然有跡可循，非常建議讀讀這本 華頓商學院最受歡迎的談判課，以及 競合策略，這兩本書之後也會在寫讀書心得</description></item><item><title>西式高湯</title><link>https://kenny50.github.io/cooking/%E8%A5%BF%E5%BC%8F%E9%AB%98%E6%B9%AF/</link><pubDate>Wed, 27 Mar 2024 22:19:55 +0800</pubDate><guid>https://kenny50.github.io/cooking/%E8%A5%BF%E5%BC%8F%E9%AB%98%E6%B9%AF/</guid><description>概念上來說，某種動物＋某種植物＿大量的水
植物 洋蔥、西芹、胡蘿蔔 蒜 蔥頭 肉類 液體量的 10 % 雞翅膀：蛋白質、膠質、脂肪(optional) 高壓鍋作法： 用高溫焦化做褐色高湯，因為動物普遍沒有很多“可焦化物”，可以加點奶粉，同時補充另外一層蛋白質
雞翅＋奶粉，過粉後放入鍋內翻炒至焦化，之後加水
可以加酵母粉同時翻炒至焦化代替蘑菇，當然也可以用蘑菇，重點是做出蘑菇焦化的香味
之後高壓鍋 30~45 分鐘，燉鍋就慢慢燉
傳統做法： 雞翅雞骨架＋血水倒入鍋中＋洋蔥、西芹、胡蘿蔔＋香料束（百里香＋月桂葉＋丁香&amp;hellip;）
撇掉白沫（水性蛋白）
烤骨高湯： 牛骨或任意骨頭＋大量的蒜＋芹菜梗＋蘿蔔＋番茄泥＋油＋奶粉＋酵母粉 160~180 度＋有風就給風，讓他儘速上色＋之後翻炒讓其全面上色，全面焦化之後加水，調到 120 ~130 再繼續烤
燉湯料之後處理 撈出冷卻後，給燒烤粉、麵粉、土豆澱粉，下油鍋炸
清湯 煮的時候不要滾，間隔幾分鐘看到一個泡就行
白湯 利用水的滾動＋脂肪乳化</description></item><item><title>Debugging Android, how to connect to local server</title><link>https://kenny50.github.io/posts/debugging-android-with-local-server/</link><pubDate>Tue, 26 Mar 2024 14:01:55 +0800</pubDate><guid>https://kenny50.github.io/posts/debugging-android-with-local-server/</guid><description>TL;DR port is same as server defined, the key is change to ip address
emulator — 10.0.2.2 Using ip — (required same network environment) type ifconfig | grep &amp;ldquo;inet &amp;ldquo;| grep -v 127.0.0.1 in terminal, copy something like 192.168.0.7 Port forwarding — (require usb connection) open chrome://inspect/#devices in chrome, check remote target detected your device, setup port forwarding like port: 9999 ipaddress and port : 127.0.0.1:9999 Emulator — special alias We have to connect to different ip while we tested our android in a different environment with a local server.</description></item><item><title>聲明預期定義</title><link>https://kenny50.github.io/posts/%E8%81%B2%E6%98%8E%E9%A0%90%E6%9C%9F%E5%AE%9A%E7%BE%A9/</link><pubDate>Tue, 26 Mar 2024 12:46:55 +0800</pubDate><guid>https://kenny50.github.io/posts/%E8%81%B2%E6%98%8E%E9%A0%90%E6%9C%9F%E5%AE%9A%E7%BE%A9/</guid><description>聲明預期定義 require, assert, check, elvis 對參數或狀態，應儘早聲明預期結果 儘管這些聲明，無法讓我們不必寫文件，但他仍讓開發者享有幾個好處
對不看文件、註解的協同開發者，預期結果仍會被看見 如果不符合預期，對丟出 exception 而不是有預期之外的行為 儘早聲明預期，確保在修改任何內容前就 throw exception ，以免一些操作執行、一些未執行，導致不一致的情況 程式碼在某種程度上會自我檢查，可不那麼依賴於測試來保證邏輯正確性 儘管放在function body 前段，讓其他開發者更容易看到，但並非每個開發者都會讀 source code ，所以還是得把 require, check 寫在註解裡
make them more visible protect your application stability protect your code correctness smart cast variable require 當函式傳入參數時，通常會有在某些條件下參數才能執行的情況
針對傳入參數，呼叫 require
fun demoRequire(int:Int) { require(int &amp;gt; 0){ &amp;#34;int is smaller than 0&amp;#34; } } throw IllegalArgumentException
check 確保某些狀態，用於 class 內狀態變數，通常擺在 require後
class DemoAssert(){ private var isOpen = false fun demoCheck(){ check(isOpen){ &amp;#34;is not open for now&amp;#34; } } } throw IllegalStateException</description></item></channel></rss>