[{"content":"\u003ch1 id=\"馬來西亞數位遊牧ㄧ\"\u003e馬來西亞數位遊牧(ㄧ)\u003c/h1\u003e\n\u003cp\u003e馬來西亞，其實並不是一個熱門的數位遊牧目的地，這次有緣在馬來西亞嘗試數位遊牧，主要原因是我的好友舉辦婚禮，我過去當伴郎，才有了這個機會，儘管如此，我依然在大馬留下很棒的回憶，總體來說，以數位遊牧為重心的人，可以選在待在吉隆坡，以遠端工作和文化體驗的，我建議待在檳城，若是非常喜歡自然景觀、冒險體驗的，可以嘗試東馬\u003c/p\u003e\n\u003ch2 id=\"網路\"\u003e網路\u003c/h2\u003e\n\u003cp\u003e馬來西亞的基礎網路設備在都市都算完善，但還是建議一定要有網路 sim 卡，以我個人的住宿為例，該空間有出現平常日但 WiFi 服務有問題，無法使用的狀況，後來是請外部廠商來進行維修，不論出門在外還是臨時狀況，有網路就多一份保障\u003c/p\u003e\n\u003ch2 id=\"住宿\"\u003e住宿\u003c/h2\u003e\n\u003cp\u003e經過友人的推薦，我最後選的是這間 Coliv Damai ，雖說網站上只有包季包年的資訊，但經過詢問，是可以提供包月的計費方式的，這間不僅地點良好，位於市中心，治安好（附近都是大使館），走路三分鐘就有超市，旁邊還可以直接購買 touch\u0026rsquo;n go card，距離高速公路的路口也不遠，更棒的是會經常舉辦社交活動，光是我待在那邊的一個月，就參加了三次，（農曆新年那週沒有活動），如果全部參加應該是五次，但我對卡拉 ok 沒興趣，第一次活動的時間又在參加婚禮，總之以社交取向來說，這間的氛圍很棒\u003c/p\u003e\n\u003cp\u003e缺點當然也是有的\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e對想認識其他數位遊牧的來說，這邊更常遇到的是國際學生，相對來說數位遊牧的比例較少\u003c/li\u003e\n\u003cli\u003eWiFi 有故障記錄，這對數位遊牧來說扣分比較大，但也應該算作特例事件\u003c/li\u003e\n\u003cli\u003e不會附上棉被、枕頭，這點有些見仁見智，以經營者的考量其實很合理，主要是長租的話，比起提供這些，既難以確保退租後的品項，客戶也可能用不習慣，算是多一事不如少一事，當然如果能提供 IKEA 品項的代購，能夠直接花錢處理掉就更好了\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e其他住宿當然也會介紹，除了 Coliv Damai，我還看到了其他感興趣的住宿\n\u003ca href=\"https://www.upstairs-downstairs.co/\"\u003eupstair downstair\u003c/a\u003e\n在 KLCC 的那間地點不錯，另一地點就不推薦了，可惜的是最短好像是三個月，這次就和我無緣\n\u003ca href=\"https://komuneliving.com/\"\u003ekomune living\u003c/a\u003e\n有和大馬政府合作數位遊牧相關計畫的 Coliving ，以想認識數位遊牧的角度，或許這間可以試試，他的住宿也有提供以日計價的一般住宿，住宿環境看著不錯，但地點會比較遠，和我這次的計畫不同，所以也沒有選，但讓我非常心動\u003c/p\u003e\n\u003cp\u003e至於一般的短租，我有看到 \u003ca href=\"https://my.roomz.asia/kl-city-center\"\u003eroomz\u003c/a\u003e\n這邊不僅得多花時間查詢，和屋主親自聯絡，還經常有已經租出去但還有下廣告的情況，但以純短租的 cp 值來說，價格會更好，但以我的角度來說，數位遊牧的一大樂趣就是和更多人交流，這情況就不適合從當地租屋網找，而這邊還有個大風險是要先了解各區的治安，不得不說台灣的治安真的蠻好的\u003c/p\u003e\n\u003ch2 id=\"交通\"\u003e交通\u003c/h2\u003e\n\u003cp\u003e這一定是重中之重，這邊會分為三個部分來說明\u003c/p\u003e\n\u003ch3 id=\"公眾交通\"\u003e公眾交通\u003c/h3\u003e\n\u003cp\u003e公眾交通非常重要，一來吉隆坡容易塞車，二來出門在外，有時多個藉口或許可以避免掉一些情境，回到正題，在馬來西亞的交通卡叫做 touch\u0026rsquo;n go ，這非常好用，因為在吉隆坡 MRT, KTS \u0026hellip; 是由不同公司經營的，每次轉線要買票就會超級麻煩，而 TNG 卡，可以通用所有的捷運、火車等，更重要的是，這張卡可以用手機存值、檢視餘額等等，現在就連馬來西亞的身分證都被加入 TNG 卡的功能，可以說是由國家主推的了\u003c/p\u003e\n\u003cp\u003e至於公車，我沒搭過\u003c/p\u003e\n\u003ch3 id=\"租車\"\u003e租車\u003c/h3\u003e\n\u003cp\u003e個人是建議，在吉隆坡內不要開車，道路設計亂，駕駛習慣不同，而且又容易塞車，那出吉隆坡後，租車有兩個重點要討論\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e高速公路付費\u003c/li\u003e\n\u003cli\u003e停車費繳交\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e高速公路付費，已經不接受現金了，現在主流是 TNG 卡以及另一個叫 MyPass 的東西，租車時可以向租車公司詢問，雖然聽當地人說現金不是不行，但好像要找到公務員才能繳費，偏偏那邊的公務員不僅效率慢，而且用現金的手續繁雜，絕對推薦推薦使用 TNG 卡\u003c/p\u003e\n\u003cp\u003e另一點，停車費繳交，這就有點 tricky 了，目前已知，每個州的停車費繳交方式不同，我看過 TNG 就可以繳的，也有要先買停車卷，再依照規格畫出使用時間，並提前放在雨刷上的，而最弔詭的是，停車卷販賣點不好找，即使找到了有時連本地人都買不到，最後就變成罰單 = =\u003c/p\u003e\n\u003ch3 id=\"grab\"\u003eGrab\u003c/h3\u003e\n\u003cp\u003eGrab 這絕對是行程必備的工具，簡單說，只要錢夠多，可以搭 Grab 到各處，就不用公眾交通了，基本上跟 Uber 蠻像的，非常推薦，而且如果兩人以上往返機場，搭 Grab 應該會比搭機場快捷還要划算，即使一個人，省下的時間和精力也非常值得搭\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://kenny50.github.io/digital-nomad/intro-of-digital-nomad-in-malaysia/","title":"Intro of digital nomad in Malaysia"},{"content":"\u003cp\u003e概念上來說，某種動物＋某種植物＿大量的水\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e植物\n\u003cul\u003e\n\u003cli\u003e洋蔥、西芹、胡蘿蔔\u003c/li\u003e\n\u003cli\u003e蒜\u003c/li\u003e\n\u003cli\u003e蔥頭\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e肉類\n\u003cul\u003e\n\u003cli\u003e液體量的 10 %\u003c/li\u003e\n\u003cli\u003e雞翅膀：蛋白質、膠質、脂肪(optional)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"高壓鍋作法\"\u003e高壓鍋作法：\u003c/h2\u003e\n\u003cp\u003e用高溫焦化做褐色高湯，因為動物普遍沒有很多“可焦化物”，可以加點奶粉，同時補充另外一層蛋白質\u003c/p\u003e\n\u003cp\u003e雞翅＋奶粉，過粉後放入鍋內翻炒至焦化，之後加水\u003c/p\u003e\n\u003cp\u003e可以加酵母粉同時翻炒至焦化代替蘑菇，當然也可以用蘑菇，重點是做出蘑菇焦化的香味\u003c/p\u003e\n\u003cp\u003e之後高壓鍋 30~45 分鐘，燉鍋就慢慢燉\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"傳統做法\"\u003e傳統做法：\u003c/h2\u003e\n\u003cp\u003e雞翅雞骨架＋血水倒入鍋中＋洋蔥、西芹、胡蘿蔔＋香料束（百里香＋月桂葉＋丁香\u0026hellip;）\u003c/p\u003e\n\u003cp\u003e撇掉白沫（水性蛋白）\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"烤骨高湯\"\u003e烤骨高湯：\u003c/h2\u003e\n\u003cp\u003e牛骨或任意骨頭＋大量的蒜＋芹菜梗＋蘿蔔＋番茄泥＋油＋奶粉＋酵母粉 160~180 度＋有風就給風，讓他儘速上色＋之後翻炒讓其全面上色，全面焦化之後加水，調到 120 ~130 再繼續烤\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e燉湯料之後處理\n撈出冷卻後，給燒烤粉、麵粉、土豆澱粉，下油鍋炸\u003c/p\u003e\n\u003cp\u003e清湯\n煮的時候不要滾，間隔幾分鐘看到一個泡就行\u003c/p\u003e\n\u003cp\u003e白湯\n利用水的滾動＋脂肪乳化\u003c/p\u003e\n","description":"connection between android device with local server","image":null,"permalink":"https://kenny50.github.io/cooking/%E8%A5%BF%E5%BC%8F%E9%AB%98%E6%B9%AF/","title":"西式高湯"},{"content":"\u003cp\u003eTL;DR port is same as server defined, the key is change to ip address\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eemulator — 10.0.2.2\u003c/li\u003e\n\u003cli\u003eUsing ip — (required same network environment) type ifconfig | grep \u0026ldquo;inet \u0026ldquo;| grep -v 127.0.0.1 in terminal, copy something like 192.168.0.7\u003c/li\u003e\n\u003cli\u003ePort forwarding — (require usb connection) open \u003ccode\u003echrome://inspect/#devices\u003c/code\u003e in chrome, check remote target detected your device, setup port forwarding like port: 9999 ipaddress and port : 127.0.0.1:9999\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"emulator--special-alias\"\u003eEmulator — special alias\u003c/h2\u003e\n\u003cp\u003eWe have to connect to different ip while we tested our android in a different environment with a local server. Before we dive into this article, a quick discussion will be helpful. While we type localhost in chrome, we can access the network interface via loopback on the host, and the localhost is actually the name of ip 127.0.0.1 .\u003c/p\u003e\n\u003cp\u003eNow we start from a simple one, an emulator, while we start an emulator, we actually create an android OS in our computer, if we use localhost or 127.0.0.1 inside the emulator, it will loopback to android itself, and find nothing. The 10.0.2.2 is a preserved ip special alias to your host loopback interface(127.0.0.1 on your development machine) .\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-ip--required-same-network-environment\"\u003eUsing ip — required same network environment\u003c/h2\u003e\n\u003cp\u003eThe wireless debug is more tricky, the connection between android phone and computer is not related to wireless debug, is related to the same internet environment, when a device connects to a Wi-Fi network, it is assigned an IP address by the router. This IP address is unique to that device on the network and can be used to communicate with other devices on the same network.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"port-forwarding--require-usb-connection\"\u003ePort forwarding — require usb connection\u003c/h2\u003e\n\u003cp\u003eThe last one is Usb debug mode, in the page “chrome://inspect/#devices” , port forwarding is used to route traffic from a website or web application running on a connected device to the development machine running Google Chrome.\u003c/p\u003e\n\u003cp\u003eHowever, even though I wrote port forwarding in USB mode, but using usb doesn’t impact ip solution, I prefer using ip more than using port forwarding.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.android.com/studio/run/emulator-networking\"\u003eAndroid doc\u003c/a\u003e\u003c/p\u003e\n","description":"connection between android device with local server","image":null,"permalink":"https://kenny50.github.io/posts/debugging-android-with-local-server/","title":"Debugging Android, how to connect to local server"},{"content":"\u003ch1 id=\"聲明預期定義-require-assert-check-elvis\"\u003e聲明預期定義 require, assert, check, elvis\u003c/h1\u003e\n\u003cp\u003e對參數或狀態，應儘早聲明預期結果\n儘管這些聲明，無法讓我們不必寫文件，但他仍讓開發者享有幾個好處\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e對不看文件、註解的協同開發者，預期結果仍會被看見\u003c/li\u003e\n\u003cli\u003e如果不符合預期，對丟出 exception 而不是有預期之外的行為\u003c/li\u003e\n\u003cli\u003e儘早聲明預期，確保在修改任何內容前就 throw exception ，以免一些操作執行、一些未執行，導致不一致的情況\u003c/li\u003e\n\u003cli\u003e程式碼在某種程度上會自我檢查，可不那麼依賴於測試來保證邏輯正確性\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e儘管放在function body 前段，讓其他開發者更容易看到，但並非每個開發者都會讀 source code ，所以還是得把 require, check 寫在註解裡\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emake them more visible\u003c/li\u003e\n\u003cli\u003eprotect your application stability\u003c/li\u003e\n\u003cli\u003eprotect your code correctness\u003c/li\u003e\n\u003cli\u003esmart cast variable\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"require\"\u003erequire\u003c/h2\u003e\n\u003cp\u003e當函式傳入參數時，通常會有在某些條件下參數才能執行的情況\u003c/p\u003e\n\u003cp\u003e針對傳入參數，呼叫 require\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edemoRequire\u003c/span\u003e(int:Int) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    require(int \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;int is smaller than 0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethrow \u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"check\"\u003echeck\u003c/h2\u003e\n\u003cp\u003e確保某些狀態，用於 class 內狀態變數，通常擺在 require後\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDemoAssert\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isOpen = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edemoCheck\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        check(isOpen){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;is not open for now\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethrow \u003ccode\u003eIllegalStateException\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"assert\"\u003eassert\u003c/h2\u003e\n\u003cp\u003e我們會知道function執行後應該要達到某些條件，但人總有可能犯錯，常見會出錯的情境是\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003erefactor\u003c/li\u003e\n\u003cli\u003eother developer change code or implement\u003c/li\u003e\n\u003cli\u003ewe made a mistake\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDemoTest\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Test\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e`run. a sample test`\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e..\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertEquals(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, runResult)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我們也可以透過 jvm 設置加入 \u003ccode\u003e-ea\u003c/code\u003e ，將一般 function 寫成\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epop\u003c/span\u003e(num:Int):List\u0026lt;T\u0026gt;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e..\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    assert(ret.size \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e num)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ret\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這個寫法不會在 production 時執行，僅會在 run test 的時候執行，因為我們通常不希望用戶遇到錯誤，而如果情境是需要用戶知道出錯的時候，應該要用 check\u003c/p\u003e\n\u003cp\u003e將 ａｓｓｅｒｔ 至於一般函式，而不限於測試函式的優點\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eself check -\u0026gt; 有效率的測試\u003c/li\u003e\n\u003cli\u003e預期的結果會在真實的使用案例下測試，而非固定的 test case\u003c/li\u003e\n\u003cli\u003e可在真實執行的情境下，測試某個部分\u003c/li\u003e\n\u003cli\u003e程式會儘早出錯，離出錯的地方更近，更容易修正\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e儘管有以上優點，單元測試仍不可被取代\u003c/p\u003e\n\u003ch2 id=\"elvis-operator\"\u003eelvis operator\u003c/h2\u003e\n\u003cp\u003enull check with throw or return\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(str:String?){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e input = str \u003cspan style=\"color:#f92672\"\u003e?:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(str:String?){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e input = str \u003cspan style=\"color:#f92672\"\u003e?:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;invalidate input\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(str:String?){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e input = str \u003cspan style=\"color:#f92672\"\u003e?:\u003c/span\u003e run {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        log(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;invalidate input\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","description":"Kotlin 語法的 require, assert, check 應該何時用、怎麼用呢？","image":null,"permalink":"https://kenny50.github.io/posts/%E8%81%B2%E6%98%8E%E9%A0%90%E6%9C%9F%E5%AE%9A%E7%BE%A9/","title":"聲明預期定義"}]