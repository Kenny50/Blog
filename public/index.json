[{"content":"\u003cp\u003e概念上來說，某種動物＋某種植物＿大量的水\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e植物\n\u003cul\u003e\n\u003cli\u003e洋蔥、西芹、胡蘿蔔\u003c/li\u003e\n\u003cli\u003e蒜\u003c/li\u003e\n\u003cli\u003e蔥頭\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e肉類\n\u003cul\u003e\n\u003cli\u003e液體量的 10 %\u003c/li\u003e\n\u003cli\u003e雞翅膀：蛋白質、膠質、脂肪(optional)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"高壓鍋作法\"\u003e高壓鍋作法：\u003c/h2\u003e\n\u003cp\u003e用高溫焦化做褐色高湯，因為動物普遍沒有很多“可焦化物”，可以加點奶粉，同時補充另外一層蛋白質\u003c/p\u003e\n\u003cp\u003e雞翅＋奶粉，過粉後放入鍋內翻炒至焦化，之後加水\u003c/p\u003e\n\u003cp\u003e可以加酵母粉同時翻炒至焦化代替蘑菇，當然也可以用蘑菇，重點是做出蘑菇焦化的香味\u003c/p\u003e\n\u003cp\u003e之後高壓鍋 30~45 分鐘，燉鍋就慢慢燉\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"傳統做法\"\u003e傳統做法：\u003c/h2\u003e\n\u003cp\u003e雞翅雞骨架＋血水倒入鍋中＋洋蔥、西芹、胡蘿蔔＋香料束（百里香＋月桂葉＋丁香\u0026hellip;）\u003c/p\u003e\n\u003cp\u003e撇掉白沫（水性蛋白）\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"烤骨高湯\"\u003e烤骨高湯：\u003c/h2\u003e\n\u003cp\u003e牛骨或任意骨頭＋大量的蒜＋芹菜梗＋蘿蔔＋番茄泥＋油＋奶粉＋酵母粉 160~180 度＋有風就給風，讓他儘速上色＋之後翻炒讓其全面上色，全面焦化之後加水，調到 120 ~130 再繼續烤\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e燉湯料之後處理\n撈出冷卻後，給燒烤粉、麵粉、土豆澱粉，下油鍋炸\u003c/p\u003e\n\u003cp\u003e清湯\n煮的時候不要滾，間隔幾分鐘看到一個泡就行\u003c/p\u003e\n\u003cp\u003e白湯\n利用水的滾動＋脂肪乳化\u003c/p\u003e\n","description":"connection between android device with local server","image":null,"permalink":"https://kenny50.github.io/cooking/%E8%A5%BF%E5%BC%8F%E9%AB%98%E6%B9%AF/","title":"西式高湯"},{"content":"\u003cp\u003eTL;DR port is same as server defined, the key is change to ip address\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eemulator — 10.0.2.2\u003c/li\u003e\n\u003cli\u003eUsing ip — (required same network environment) type ifconfig | grep \u0026ldquo;inet \u0026ldquo;| grep -v 127.0.0.1 in terminal, copy something like 192.168.0.7\u003c/li\u003e\n\u003cli\u003ePort forwarding — (require usb connection) open \u003ccode\u003echrome://inspect/#devices\u003c/code\u003e in chrome, check remote target detected your device, setup port forwarding like port: 9999 ipaddress and port : 127.0.0.1:9999\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"emulator--special-alias\"\u003eEmulator — special alias\u003c/h2\u003e\n\u003cp\u003eWe have to connect to different ip while we tested our android in a different environment with a local server. Before we dive into this article, a quick discussion will be helpful. While we type localhost in chrome, we can access the network interface via loopback on the host, and the localhost is actually the name of ip 127.0.0.1 .\u003c/p\u003e\n\u003cp\u003eNow we start from a simple one, an emulator, while we start an emulator, we actually create an android OS in our computer, if we use localhost or 127.0.0.1 inside the emulator, it will loopback to android itself, and find nothing. The 10.0.2.2 is a preserved ip special alias to your host loopback interface(127.0.0.1 on your development machine) .\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-ip--required-same-network-environment\"\u003eUsing ip — required same network environment\u003c/h2\u003e\n\u003cp\u003eThe wireless debug is more tricky, the connection between android phone and computer is not related to wireless debug, is related to the same internet environment, when a device connects to a Wi-Fi network, it is assigned an IP address by the router. This IP address is unique to that device on the network and can be used to communicate with other devices on the same network.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"port-forwarding--require-usb-connection\"\u003ePort forwarding — require usb connection\u003c/h2\u003e\n\u003cp\u003eThe last one is Usb debug mode, in the page “chrome://inspect/#devices” , port forwarding is used to route traffic from a website or web application running on a connected device to the development machine running Google Chrome.\u003c/p\u003e\n\u003cp\u003eHowever, even though I wrote port forwarding in USB mode, but using usb doesn’t impact ip solution, I prefer using ip more than using port forwarding.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.android.com/studio/run/emulator-networking\"\u003eAndroid doc\u003c/a\u003e\u003c/p\u003e\n","description":"connection between android device with local server","image":null,"permalink":"https://kenny50.github.io/posts/debugging-android-with-local-server/","title":"Debugging Android, how to connect to local server"},{"content":"\u003ch1 id=\"聲明預期定義-require-assert-check-elvis\"\u003e聲明預期定義 require, assert, check, elvis\u003c/h1\u003e\n\u003cp\u003e對參數或狀態，應儘早聲明預期結果\n儘管這些聲明，無法讓我們不必寫文件，但他仍讓開發者享有幾個好處\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e對不看文件、註解的協同開發者，預期結果仍會被看見\u003c/li\u003e\n\u003cli\u003e如果不符合預期，對丟出 exception 而不是有預期之外的行為\u003c/li\u003e\n\u003cli\u003e儘早聲明預期，確保在修改任何內容前就 throw exception ，以免一些操作執行、一些未執行，導致不一致的情況\u003c/li\u003e\n\u003cli\u003e程式碼在某種程度上會自我檢查，可不那麼依賴於測試來保證邏輯正確性\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e儘管放在function body 前段，讓其他開發者更容易看到，但並非每個開發者都會讀 source code ，所以還是得把 require, check 寫在註解裡\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emake them more visible\u003c/li\u003e\n\u003cli\u003eprotect your application stability\u003c/li\u003e\n\u003cli\u003eprotect your code correctness\u003c/li\u003e\n\u003cli\u003esmart cast variable\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"require\"\u003erequire\u003c/h2\u003e\n\u003cp\u003e當函式傳入參數時，通常會有在某些條件下參數才能執行的情況\u003c/p\u003e\n\u003cp\u003e針對傳入參數，呼叫 require\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edemoRequire\u003c/span\u003e(int:Int) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    require(int \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;int is smaller than 0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethrow \u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"check\"\u003echeck\u003c/h2\u003e\n\u003cp\u003e確保某些狀態，用於 class 內狀態變數，通常擺在 require後\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDemoAssert\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isOpen = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edemoCheck\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        check(isOpen){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;is not open for now\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethrow \u003ccode\u003eIllegalStateException\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"assert\"\u003eassert\u003c/h2\u003e\n\u003cp\u003e我們會知道function執行後應該要達到某些條件，但人總有可能犯錯，常見會出錯的情境是\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003erefactor\u003c/li\u003e\n\u003cli\u003eother developer change code or implement\u003c/li\u003e\n\u003cli\u003ewe made a mistake\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDemoTest\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003e@Test\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e`run. a sample test`\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e..\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertEquals(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, runResult)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我們也可以透過 jvm 設置加入 \u003ccode\u003e-ea\u003c/code\u003e ，將一般 function 寫成\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epop\u003c/span\u003e(num:Int):List\u0026lt;T\u0026gt;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e..\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    assert(ret.size \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e num)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ret\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這個寫法不會在 production 時執行，僅會在 run test 的時候執行，因為我們通常不希望用戶遇到錯誤，而如果情境是需要用戶知道出錯的時候，應該要用 check\u003c/p\u003e\n\u003cp\u003e將 ａｓｓｅｒｔ 至於一般函式，而不限於測試函式的優點\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eself check -\u0026gt; 有效率的測試\u003c/li\u003e\n\u003cli\u003e預期的結果會在真實的使用案例下測試，而非固定的 test case\u003c/li\u003e\n\u003cli\u003e可在真實執行的情境下，測試某個部分\u003c/li\u003e\n\u003cli\u003e程式會儘早出錯，離出錯的地方更近，更容易修正\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e儘管有以上優點，單元測試仍不可被取代\u003c/p\u003e\n\u003ch2 id=\"elvis-operator\"\u003eelvis operator\u003c/h2\u003e\n\u003cp\u003enull check with throw or return\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(str:String?){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e input = str \u003cspan style=\"color:#f92672\"\u003e?:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(str:String?){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e input = str \u003cspan style=\"color:#f92672\"\u003e?:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;invalidate input\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetString\u003c/span\u003e(str:String?){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e input = str \u003cspan style=\"color:#f92672\"\u003e?:\u003c/span\u003e run {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        log(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;invalidate input\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","description":"Kotlin 語法的 require, assert, check 應該何時用、怎麼用呢？","image":null,"permalink":"https://kenny50.github.io/posts/%E8%81%B2%E6%98%8E%E9%A0%90%E6%9C%9F%E5%AE%9A%E7%BE%A9/","title":"聲明預期定義"},{"content":"\u003ch1 id=\"blog-測試\"\u003eBlog 測試\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eh2\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e一一一\u003c/li\u003e\n\u003cli\u003e二二二\u003c/li\u003e\n\u003cli\u003e三三三\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"h3\"\u003eh3\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e123\u003c/li\u003e\n\u003cli\u003e456\u003c/li\u003e\n\u003cli\u003e789\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"h4\"\u003eh4\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e粗體\u003c/strong\u003e\n\u003cem\u003e斜體\u003c/em\u003e\n\u003cdel\u003e刪除線\u003c/del\u003e\u003c/p\u003e\n\u003ch5 id=\"h5\"\u003eh5\u003c/h5\u003e\n\u003cp\u003e\u003ca href=\"https://www.google.com\"\u003e超連結\u003c/a\u003e\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://kenny50.github.io/posts/first-post/","title":"First Post"}]