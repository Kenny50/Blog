[{"content":"\u003ch1 id=\"聲明預期定義-require-assert-check-elvis\"\u003e聲明預期定義 require, assert, check, elvis\u003c/h1\u003e\n\u003cp\u003e對參數或狀態，應儘早聲明預期結果\n儘管這些聲明，無法讓我們不必寫文件，但他仍讓開發者享有幾個好處\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e對不看文件、註解的協同開發者，預期結果仍會被看見\u003c/li\u003e\n\u003cli\u003e如果不符合預期，對丟出 exception 而不是有預期之外的行為\u003c/li\u003e\n\u003cli\u003e儘早聲明預期，確保在修改任何內容前就 throw exception ，以免一些操作執行、一些未執行，導致不一致的情況\u003c/li\u003e\n\u003cli\u003e程式碼在某種程度上會自我檢查，可不那麼依賴於測試來保證邏輯正確性\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e儘管放在function body 前段，讓其他開發者更容易看到，但並非每個開發者都會讀 source code ，所以還是得把 require, check 寫在註解裡\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emake them more visible\u003c/li\u003e\n\u003cli\u003eprotect your application stability\u003c/li\u003e\n\u003cli\u003eprotect your code correctness\u003c/li\u003e\n\u003cli\u003esmart cast variable\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"require\"\u003erequire\u003c/h2\u003e\n\u003cp\u003e當函式傳入參數時，通常會有在某些條件下參數才能執行的情況\u003c/p\u003e\n\u003cp\u003e針對傳入參數，呼叫 require\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003efun demoRequire(int:Int) {\n    require(int \u0026gt; 0){\n        \u0026#34;int is smaller than 0\u0026#34;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ethrow \u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"check\"\u003echeck\u003c/h2\u003e\n\u003cp\u003e確保某些狀態，用於 class 內狀態變數，通常擺在 require後\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003eclass DemoAssert(){\n    private var isOpen = false\n    fun demoCheck(){\n        check(isOpen){\n            \u0026#34;is not open for now\u0026#34;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ethrow \u003ccode\u003eIllegalStateException\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"assert\"\u003eassert\u003c/h2\u003e\n\u003cp\u003e我們會知道function執行後應該要達到某些條件，但人總有可能犯錯，常見會出錯的情境是\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003erefactor\u003c/li\u003e\n\u003cli\u003eother developer change code or implement\u003c/li\u003e\n\u003cli\u003ewe made a mistake\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003eclass DemoTest{\n    \n    @Test\n    fun `run. a sample test`(){\n        ...\n        assertEquals(10, runResult)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我們也可以透過 jvm 設置加入 \u003ccode\u003e-ea\u003c/code\u003e ，將一般 function 寫成\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003efun pop(num:Int):List\u0026lt;T\u0026gt;{\n    ...\n    assert(ret.size == num)\n    return ret\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e這個寫法不會在 production 時執行，僅會在 run test 的時候執行，因為我們通常不希望用戶遇到錯誤，而如果情境是需要用戶知道出錯的時候，應該要用 check\u003c/p\u003e\n\u003cp\u003e將 ａｓｓｅｒｔ 至於一般函式，而不限於測試函式的優點\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eself check -\u0026gt; 有效率的測試\u003c/li\u003e\n\u003cli\u003e預期的結果會在真實的使用案例下測試，而非固定的 test case\u003c/li\u003e\n\u003cli\u003e可在真實執行的情境下，測試某個部分\u003c/li\u003e\n\u003cli\u003e程式會儘早出錯，離出錯的地方更近，更容易修正\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e儘管有以上優點，單元測試仍不可被取代\u003c/p\u003e\n\u003ch2 id=\"elvis-operator\"\u003eelvis operator\u003c/h2\u003e\n\u003cp\u003enull check with throw or return\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003efun getString(str:String?){\n    val input = str ?: return\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003efun getString(str:String?){\n    val input = str ?: throw(\u0026#34;invalidate input\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-kotlin=\" data-lang=\"kotlin=\"\u003efun getString(str:String?){\n    val input = str ?: run {\n        log(\u0026#34;invalidate input\u0026#34;)\n        return \n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":null,"permalink":"http://localhost:1313/posts/%E8%81%B2%E6%98%8E%E9%A0%90%E6%9C%9F%E5%AE%9A%E7%BE%A9/","title":"聲明預期定義"},{"content":"\u003ch1 id=\"blog-測試\"\u003eBlog 測試\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eh2\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e一一一\u003c/li\u003e\n\u003cli\u003e二二二\u003c/li\u003e\n\u003cli\u003e三三三\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"h3\"\u003eh3\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e123\u003c/li\u003e\n\u003cli\u003e456\u003c/li\u003e\n\u003cli\u003e789\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"h4\"\u003eh4\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e粗體\u003c/strong\u003e\n\u003cem\u003e斜體\u003c/em\u003e\n\u003cdel\u003e刪除線\u003c/del\u003e\u003c/p\u003e\n\u003ch5 id=\"h5\"\u003eh5\u003c/h5\u003e\n\u003cp\u003e\u003ca href=\"https://www.google.com\"\u003e超連結\u003c/a\u003e\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/posts/first-post/","title":"First Post"}]